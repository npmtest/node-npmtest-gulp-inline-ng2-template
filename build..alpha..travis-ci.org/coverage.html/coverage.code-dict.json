{"/home/travis/build/npmtest/node-npmtest-gulp-inline-ng2-template/test.js":"/* istanbul instrument in package npmtest_gulp_inline_ng2_template */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-inline-ng2-template/lib.npmtest_gulp_inline_ng2_template.js":"/* istanbul instrument in package npmtest_gulp_inline_ng2_template */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_inline_ng2_template = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_inline_ng2_template = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-inline-ng2-template/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-inline-ng2-template && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_inline_ng2_template */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_inline_ng2_template\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_inline_ng2_template.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_inline_ng2_template.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_inline_ng2_template.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_inline_ng2_template.__dirname + '/lib.npmtest_gulp_inline_ng2_template.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-inline-ng2-template/node_modules/gulp-inline-ng2-template/index.js":"\"use strict\";\n\nvar gutil = require('gulp-util');\nvar through = require('through2');\n\n\nvar PLUGIN_NAME = 'gulp-inline-ng2-template';\n\nmodule.exports = exports = function inline(options) {\n  return through.obj(function (file, enc, cb) {\n    if (file.isNull()) {\n      return cb(null, file);\n    }\n\n    if (file.isStream()) {\n      return cb(new gutil.PluginError(PLUGIN_NAME, 'Streaming not supported'));\n    }\n\n    try {\n      var parse = require('./parser')(file, options);\n      var _this = this\n\n      parse(function (err, contents) {\n        if (err) return cb(new gutil.PluginError(PLUGIN_NAME, err, {fileName: file.path}));\n        file.contents = new Buffer(contents);\n        _this.push(file);\n        process.nextTick(cb);\n      });\n\n    } catch (err) {\n      this.emit('error', new gutil.PluginError(PLUGIN_NAME, err, {fileName: file.path}));\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-inline-ng2-template/node_modules/gulp-inline-ng2-template/parser.js":"\"use strict\";\n\nvar series = require('async').series;\nvar clone = require('clone');\nvar compile = require('es6-templates').compile;\nvar extend = require('extend');\nvar fs = require('fs');\nvar isarray = require('isarray');\nvar join = require('path').join;\nvar dirname = require('path').dirname;\nvar resolve = require('path').resolve;\n\n\n// -----------------------------------------------------------------------------\n// Configuration.\nvar defaults = {\n  base: '/',\n  target: 'es6',\n  indent: 2,\n  useRelativePaths: false,\n  removeLineBreaks: false,\n  templateExtension: '.html',\n  templateFunction: false,\n  templateProcessor: defaultProcessor,\n  styleProcessor: defaultProcessor,\n  customFilePath: defaultCustomFilePath,\n  supportNonExistentFiles: false\n};\n\nfunction defaultProcessor(path, ext, file, cb) {\n  return cb(null, file);\n}\n\nfunction defaultCustomFilePath(ext, path) {\n  return path;\n}\n\nvar htmlOptions = function (opts) {\n  return {\n    type: 'html',\n    prop_url: 'templateUrl',\n    prop: 'template',\n    start_pattern: /templateUrl\\s*:.*/,\n    end_pattern: new RegExp('.*\\\\' + opts.templateExtension + '\\s*(\\'\\\\)|\\')|.*\\\\' + opts.templateExtension + '\\s*(\"\\\\)|\")|.*\\\\' + opts.templateExtension + '\\s*(`\\\\)|`)'),\n    oneliner_pattern: new RegExp('templateUrl.*(\\\\' + opts.templateExtension + '\\s*(\\'\\\\)|\\')|\\\\' + opts.templateExtension + 's*(\"\\\\)|\")|\\\\' + opts.templateExtension + 's*(`\\\\)|`))')\n  };\n};\n\nvar cssOptions = function () {\n  return {\n    type: 'css',\n    prop_url: 'styleUrls',\n    prop: 'styles',\n    start_pattern: /styleUrls\\s*:.*/,\n    end_pattern: /.*]/,\n    oneliner_pattern: /styleUrls(.*?)]/\n  };\n};\n\n\nmodule.exports = function parser(file, options) {\n  var opts = extend({}, defaults, (options || {}));\n  var lines = file.contents.toString().replace(/\\r/g, '').split('\\n');\n  var start_line_idx, end_line_idx, frag;\n  var HTML = false;\n  var CSS = false;\n\n  return function parse(done) {\n    series([\n      processTemplate,\n      processStyles\n    ], function (err) {\n      done(err, lines.join('\\n'));\n    });\n  };\n\n\n  function processTemplate(done) {\n    if (opts.templateProcessor) {\n      HTML = true;\n      extend(opts, htmlOptions(opts));\n      execute(function (err) {\n        reset();\n        done(err);\n      });\n    }\n  }\n\n  function processStyles(done) {\n    if (opts.styleProcessor) {\n      CSS = true;\n      extend(opts, cssOptions());\n      execute(function (err) {\n        reset();\n        done(err);\n      });\n    }\n  }\n\n  function execute(done) {\n    var seriesArray = [];\n\n    for(var i = 0; i < lines.length; i++) {\n      (function (i) {\n        seriesArray.push(function (cb) {\n          var idx = i;\n          var line = lines[idx];\n          getIndexes(line, idx);\n          if (i === end_line_idx && start_line_idx) {\n            series([\n              getFragment,\n              replaceFrag\n            ], cb);\n          } else {\n            process.nextTick(cb);\n          }\n        });\n      }(i));\n    }\n\n    series(seriesArray, done);\n  }\n\n  function getIndexes(line, i) {\n      if (opts.start_pattern.test(line)) {\n        start_line_idx = i;\n      }\n      if (opts.end_pattern.test(line)) {\n        // Match end pattern without start.\n        // end_line_idx is still equal to previous loop turn value.\n        if (start_line_idx <= end_line_idx) return;\n        end_line_idx = i;\n      }\n  }\n\n  function getFragment(cb) {\n    var fragStart, fragEnd;\n    if (start_line_idx < 0 || end_line_idx < 0) return cb();\n    // One liner.\n    if (start_line_idx === end_line_idx) {\n      frag = opts.oneliner_pattern.exec(lines[start_line_idx])[0];\n    }\n    // One or more lines.\n    if (start_line_idx < end_line_idx) {\n      fragStart = opts.start_pattern.exec(lines[start_line_idx])[0];\n      fragEnd   = opts.end_pattern.exec(lines[end_line_idx])[0];\n      frag      = concatLines();\n    }\n\n    process.nextTick(cb);\n\n    function concatLines() {\n      var _lines = clone(lines);\n      _lines[start_line_idx] = fragStart;\n      _lines[end_line_idx]   = fragEnd;\n      return _lines.splice(start_line_idx, end_line_idx - start_line_idx + 1).join('');\n    }\n  }\n\n  function replaceFrag(cb) {\n    var _urls;\n    var fnIndex = frag.indexOf('(');\n    if (fnIndex > -1 && opts.templateFunction) {\n      // Using template function.\n\n      // Check if templateFunction uses single quotes or quote marks.\n      var urlRegex = frag.indexOf('\\'') != -1 ? /'(.*)'/ : /\"(.*)\"/;\n\n      // Need to clone the regex, since exec() keeps the lastIndex.\n      var testRegex = clone(urlRegex), lineCheck = clone(urlRegex);\n      var hasMultiline = testRegex.exec(frag)[1];\n\n      if (hasMultiline && hasMultiline.lastIndexOf(\",\") != -1) {\n        _urls = [];\n        // Split fragments that kept comma.\n        var files = frag.split(\",\");\n\n        // Populate url list, using the return value of the templateFunction.\n        for (var i = 0; i < files.length; i++) {\n          _urls.push(opts.templateFunction(lineCheck.exec(files[i])[1]));\n        }\n      }\n\n      if (!_urls) {\n        _urls = opts.templateFunction(urlRegex.exec(frag)[1]);\n      }\n    } else {\n      _urls = eval('({' + frag + '})')[opts.prop_url];\n    }\n\n    var urls  = isarray(_urls) ? _urls : [_urls];\n    var line  = lines[start_line_idx];\n    var indentation = /^\\s*/.exec(line)[0];\n    var assetFiles  = '';\n    var startOfInsertionBlock = '\\n';\n    var endOfInsertionBlock = '\\n';\n\n    series([\n      getFilesAndApplyCustomProcessor,\n      _replaceFrag\n    ], cb);\n\n    function _replaceFrag(cb) {\n      assetFiles = assetFiles\n        .replace(/\\\\/g, '\\\\\\\\')    // Escape existing backslashes for the final output into a string literal, which would otherwise escape the character after it\n        .replace(/\\$\\{/g, '\\\\${')  // Escape ES6 ${myVar} to \\${myVar}. ES6 would otherwise look for a local variable named myVar\n        .replace(/`/g, '\\\\`')      // Escape ES6 backticks which would end the ES6 template literal string too early\n        .replace(/(\\n*)$/, '');    // Trim trailing line breaks\n\n      // We don't need indentation if we are going to insert it as one line\n      if(!opts.removeLineBreaks) {\n        // Indent content.\n        assetFiles = indent(assetFiles);\n      }\n\n      if(opts.removeLineBreaks) {\n        assetFiles = removeLineBreaks(assetFiles);\n        // don't need the indentation\n        indentation = '';\n        startOfInsertionBlock = '';\n        endOfInsertionBlock = '';\n      }\n\n      // Build the final string.\n      if ('html' === opts.type)\n        assetFiles = opts.prop + ': `' + startOfInsertionBlock + assetFiles + endOfInsertionBlock + indentation + '`';\n      if ('css' === opts.type)\n        assetFiles = opts.prop + ': [`' + startOfInsertionBlock + assetFiles + endOfInsertionBlock + indentation + '`]';\n      if ('es5' === opts.target) assetFiles = compile(assetFiles).code;\n\n      // One liner.\n      if (start_line_idx === end_line_idx) {\n        lines[start_line_idx] = line.replace(opts.oneliner_pattern, assetFiles);\n      }\n      // One or more lines.\n      if (start_line_idx < end_line_idx) {\n        if (/(,)$/.test(lines[end_line_idx])) assetFiles += ',';\n        lines[start_line_idx] = line.replace(opts.start_pattern, assetFiles);\n        lines.splice(start_line_idx + 1, end_line_idx - start_line_idx);\n      }\n\n      cb(null);\n    }\n\n    function getFilesAndApplyCustomProcessor(cb) {\n      series(urls.map(function (url) {\n        return function (cb) {\n          var data = getFileData(url);\n          var path = resolve(dirname(file.path), url);\n          var ext = /\\.[0-9a-z]+$/i.exec(url);\n          if (HTML && opts.templateProcessor) {\n            process.nextTick(function () {\n              opts.templateProcessor(path, ext, data, customProcessorCallback(cb));\n            });\n          }\n          if (CSS && opts.styleProcessor) {\n            process.nextTick(function () {\n              opts.styleProcessor(path, ext, data, customProcessorCallback(cb));\n            });\n          }\n        };\n      }), cb);\n\n      function customProcessorCallback(cb) {\n        return function (err, file) {\n          if (err) return cb(err);\n          assetFiles += file;\n          process.nextTick(cb);\n        };\n      }\n    }\n\n    function getFileData(filepath) {\n      var absPath = opts.useRelativePaths ? join(dirname(file.path), filepath)\n                                          : join(process.cwd(), opts.base, filepath);\n\n      if(opts.supportNonExistentFiles && !fs.existsSync(absPath)) {\n        return '';\n      }\n\n      var ext = /\\.[0-9a-z]+$/i.exec(absPath);\n      absPath = opts.customFilePath(ext, absPath);\n\n      return fs.readFileSync(absPath)\n        .toString()\n        .replace(/\\r/g, '')\n        .replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n    }\n\n    function indent(str) {\n      var lines = [];\n      var spaces = '';\n      for (var i = 0; i < indentation.length + opts.indent; i++) { spaces += ' '; }\n      str.split('\\n').forEach(function (line) {\n        // Add indentation spaces only to non-empty lines.\n        lines.push((/^(\\s*)$/.test(line) ? '' : spaces) + line);\n      });\n      return lines.join('\\n');\n    }\n\n    function removeLineBreaks(str) {\n      return str.replace(/(\\r\\n|\\n|\\r)/gm,\" \");\n    }\n  }\n\n  function reset() {\n    start_line_idx = undefined;\n    end_line_idx = undefined;\n    frag = undefined;\n    HTML = false;\n    CSS = false;\n  }\n};\n"}